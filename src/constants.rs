use std::f64::consts::PI;


pub const TAU: f64 = 2.0 * PI;
pub const HALF_PI: f64 = PI / 2.0;

/// Lower values can be considered to be zero for optimization purposes
pub const ZERO_VALUE_LIMIT: f64 = 0.001;

pub const PLUGIN_NAME: &'static str = "FM";

pub const NUM_OPERATORS: usize = 4;

pub const OPERATOR_DEFAULT_VOLUME: f64 = 1.0;
pub const OPERATOR_DEFAULT_SKIP_CHAIN_FACTOR: f64 = 0.0;
pub const OPERATOR_DEFAULT_ADDITIVE_FACTOR: f64 = 0.0;
pub const OPERATOR_DEFAULT_PANNING: f64 = 0.5;
pub const OPERATOR_DEFAULT_FREQUENCY_RATIO: f64 = 1.0;
pub const OPERATOR_DEFAULT_FREQUENCY_FREE: f64 = 1.0;
pub const OPERATOR_DEFAULT_FREQUENCY_FINE: f64 = 1.0;
pub const OPERATOR_DEFAULT_FEEDBACK: f64 = 0.0;
pub const OPERATOR_DEFAULT_MODULATION_INDEX: f64 = 1.0;

pub const OPERATOR_ENVELOPE_MAX_DURATION: f64 = 4.0;
pub const OPERATOR_ENVELOPE_MIN_DURATION: f64 = 0.004;

pub const OPERATOR_DEFAULT_VOLUME_ENVELOPE_ATTACK_DURATION: f64 = 0.1;
pub const OPERATOR_DEFAULT_VOLUME_ENVELOPE_ATTACK_VALUE: f64 = 1.0;
pub const OPERATOR_DEFAULT_VOLUME_ENVELOPE_DECAY_DURATION: f64 = 0.0;
pub const OPERATOR_DEFAULT_VOLUME_ENVELOPE_DECAY_VALUE: f64 = 1.0;
pub const OPERATOR_DEFAULT_VOLUME_ENVELOPE_RELEASE_DURATION: f64 = 0.25;

/// Multiply the volume of each voice with this factor
pub const VOICE_VOLUME_FACTOR: f64 = 0.1;

pub const MASTER_FREQUENCY_STEPS: [f64; 12] = [20.0, 110.0, 220.0, 400.0, 435.0, 438.0, 440.0, 442.0, 445.0, 480.0, 880.0, 20_000.0];

pub const OPERATOR_RATIO_STEPS: [f64; 28] = [0.0625, 0.125, 0.2, 0.25, 0.33, 0.5, 0.55, 0.66, 0.6896, 0.8, 0.8333, 1.0, 1.2, 1.25, 1.33, 1.45, 1.5, 1.8, 1.875, 2.0, 2.5, 3.0, 3.5, 4.0, 8.0, 16.0, 32.0, 64.0];
pub const OPERATOR_FREE_STEPS: [f64; 14] = [0.001, 0.0625, 0.125, 0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 3.0, 4.0, 16.0, 64.0, 256.0];
pub const OPERATOR_FINE_STEPS: [f64; 17] = [0.8, 0.85, 0.9, 0.95, 0.97, 0.98, 0.99, 0.995, 1.0, 1.005, 1.01, 1.02, 1.03, 1.05, 1.1, 1.15, 1.2];
pub const OPERATOR_BETA_STEPS: [f64; 16] = [0.0, 0.01, 0.1, 0.2, 0.5, 1.0, 2.0, 3.0, 5.0, 10.0, 20.0, 35.0, 50.0, 75.0, 100.0, 1000.0];

pub const INTERPOLATION_SAMPLES_PER_STEP: u8 = 4;
pub const INTERPOLATION_STEPS: u8 = 8;
pub const INTERPOLATION_STEPS_FLOAT: f64 = INTERPOLATION_STEPS as f64;